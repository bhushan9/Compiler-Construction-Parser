/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package parser;

import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.Enumeration;
import scanner.*;
import static scanner.Scanner.L;

/**
 *
 * @author Bhushan
 */
public class Parser {

    static int variable, function, statement;  // Used to count no of variables, functions and statements.

    static String word = null;

    static int i = 0;  // Used to access a particular token.
    public static String[] tokenarray;

    public static void main(String args[]) throws IOException {

        // Initiating the scanner with name of input file as a command line argument
        Scanner.Scanner(args[0]);

         // Creating an array of tokens generated by the scanner.
        tokenarray = L.toArray(new String[0]);
        word = tokenarray[i];

        // Top down parsing starts 
        if (Program()) {
            if ("EOF".equals(word)) {
                System.out.println("pass " + "variable:" + variable + " function:" + function + " statements:" + statement);
            }
         else 
            System.out.println("error");
        }
       

    }

    public static boolean Program() throws IOException {
        
        if (typename()) {
            return Program1();
        } else {
            return true;
        }
    }

    public static boolean Program1() throws IOException {

        if ("ID".equals(word)) {

            i++;
            word = tokenarray[i];
            return Program2();
        } else {
            return false;
        }
    }

    public static boolean Program2() throws IOException {

        boolean flag = false;
        if ("left_parenthesis".equals(word)) {

            i++;
            word = tokenarray[i];
            if (parameterlist()) {

                if ("right_parenthesis".equals(word)) {

                    i++;
                    word = tokenarray[i];
                    if (Beta1() && C()) {
                        flag = true;
                    }
                }
            }

        } else if (Beta3() && Program3()) {

            flag = true;

        }

        return flag;
    }

    public static boolean Program3() throws IOException {

        if (idlistprime()) {
            return Program4();

        } else {
            return false;
        }

    }

    public static boolean Program4() throws IOException {

        if ("semicolon".equals(word)) {
            i++;
            word = tokenarray[i];
            return Program5();

        } else {
            return false;
        }

    }

    public static boolean Program5() throws IOException {

        if (typename()) {

            if ("ID".equals(word)) {
                i++;
                word = tokenarray[i];
                return Program7();
            }

            return true;
        } else {
            return true;
        }
    }

    public static boolean Program7() throws IOException {
       
        boolean flag = false;
        if ("left_parenthesis".equals(word)) {
            i++;
            word = tokenarray[i];
            if (parameterlist()) {

                if ("right_parenthesis".equals(word)) {
                    i++;
                    word = tokenarray[i];
                    if (Beta1()) {
                        if (C()) {
                            flag = true;
                        }
                    }
                }
            }

        } 
         
        
        
        else if ("left_bracket".equals(word)) {
           
            i++;
            word = tokenarray[i];
            if (expression()) {
                if ("right_bracket".equals(word)) {
                    i++;
                    word = tokenarray[i];
                    if (idlistprime()) {

                        if ("semicolon".equals(word)) {
                            i++;
                            word=tokenarray[i];
                            
                                if (A()) {
                                    flag = true;
                                }
                            
                        }
                    }

                }

            }
        }
        else if (idlistprime()) {
           
            if ("semicolon".equals(word)) {
                i++;
                word = tokenarray[i];
                
                    if (A()) {
                        flag = true;
                    }
                
            }
        } 
        
       

        return flag;

    }
    
    public static boolean A() throws IOException{
   
        boolean flag= false;
        if(typename())
        {
           
            if("ID".equals(word))
            {
             i++;
             word=tokenarray[i];
             
             if(Aprime())
                 flag = true;
            
            }
        
        
        
        
        }
        else 
          flag =true;
        
        
        return flag;
            
    
    
    }
    
    
    public static boolean Aprime() throws IOException{
    
        boolean flag= false;
      if("left_parenthesis".equals(word))
      { 
           i++;
           word=tokenarray[i];
           if(parameterlist())
           {
             if("right_parenthesis".equals(word))
             {
              i++;
           word=tokenarray[i];
           
            if(Beta1())
                if(C())
                    flag = true;
             
             }
           
           }
       
      
      
      }
      
      else if(Beta3()){
          
          if(idlistprime())
          {
            if("semicolon".equals(word))
            {
                i++;
                word=tokenarray[i];
                if(B())
                    if(Adoubleprime())
                        flag = true;
            
            
            }
          
          
          
          }
      
      
      
      
      
      
      
      }
            
    return flag;
    
    }
    
    public static boolean Adoubleprime() throws IOException
    {        boolean flag= false;
    
         if(funcdecl())
         {
         if(Beta1())
             if(C())
                 
                 flag = true;
         
         }
         else
             flag= true;
         
         return flag;
    
    
    
    }

    public static boolean Program6() throws IOException {

        if (typename()) {
            if ("ID".equals(word)) {
                i++;
                word = tokenarray[i];
                if ("left_parenthesis".equals(word)) {
                    i++;
                    word = tokenarray[i];
                    if (parameterlist()) {
                        if ("right_parenthesis".equals(word)) {
                            i++;
                            word = tokenarray[i];
                            if (Beta1() && C()) {
                                return true;
                            } else {
                                return false;
                            }

                        } else {
                            return false;
                        }

                    } else {
                        return false;
                    }

                } else {
                    return false;
                }

            } else {
                return false;
            }

        } else {
            return true;
        }

    }

    public static boolean func_list() throws IOException {

        if (typename()) {
            if ("ID".equals(word)) {
                i++;
                word = tokenarray[i];
                if ("left_parenthesis".equals(word)) {
                    i++;
                    word = tokenarray[i];
                    if (parameterlist()) {
                        if ("right_parenthesis".equals(word)) {
                            i++;
                            word = tokenarray[i];

                            if (Beta1() && C()) {

                                return true;
                            } else {
                                return false;
                            }

                        } else {
                            return false;
                        }

                    } else {
                        return false;
                    }

                } else {
                    return false;
                }

            } else {
                return false;
            }

        } else {
            return true; // ***************
        }

    }

    public static boolean C() throws IOException {

        if (func_list()) {

            return true;
        } else {
            return true;
        }
    }

    public static boolean func() throws IOException {

        if (funcdecl()) {
            return Beta1();
        } else {
            return false;
        }

    }

// Doubtful in these procedure
    public static boolean Beta1() throws IOException {

        boolean flag = false;

        if ("semicolon".equals(word)) {
            i++;
            word = tokenarray[i];

            flag = true;

        } else if ("left_brace".equals(word)) {
            //.println("yoyo");
            i++;
            word = tokenarray[i];
            if (datadecls()) {

                if (statements()) {

                    // call next word
                    if ("right_brace".equals(word)) {
                        function++;
                        i++;

                        word = tokenarray[i];

                        flag = true;
                    }
                }

            }
        }

        return flag;

    }

    public static boolean funcdecl() throws IOException {

        if (typename()) {

            if ("ID".equals(word)) {
                i++;
                word = tokenarray[i];
                if ("left_parenthesis".equals(word)) {
                    i++;
                    word = tokenarray[i];
                    if (parameterlist()) {
                        if ("right_parenthesis".equals(word)) {
                            i++;
                            word = tokenarray[i];
                            return true;

                        } else {
                            return false;
                        }
                    } else {
                        return false;
                    }

                } else {
                    return false;
                }
            } else {
                return false;
            }

        } else {
            return false;
        }

    }

    public static boolean typename() throws IOException {

        if ("int".equals(word) || "void".equals(word) || "binary".equals(word) || "decimal".equals(word)) {

            i++;
            word = tokenarray[i];
            return true;

        } else {
            return false;
        }
    }

    public static boolean parameterlist() throws IOException {

        boolean flag = false;
        if ("int".equals(word)) {
            i++;
            word = tokenarray[i];
            if ("ID".equals(word)) {
                i++;
                word = tokenarray[i];
                if (nonemptylistprime()) {
                    flag = true;
                }
            }

        } else if ("decimal".equals(word)) {
            i++;
            word = tokenarray[i];
            if ("ID".equals(word)) {
                i++;
                word = tokenarray[i];
                if (nonemptylistprime()) {
                    flag = true;
                }

            }

        } else if ("binary".equals(word)) {
            i++;
            word = tokenarray[i];
            if ("ID".equals(word)) {
                i++;
                word = tokenarray[i];
                if (nonemptylistprime()) {
                    flag = true;
                }

            }

        } else if ("void".equals(word)) {
            i++;
            word = tokenarray[i];
            if (Z()) {
                flag = true;
            }

        } else {
            flag = true;
        }

        return flag;

    }

    public static boolean Z() throws IOException {

        if ("ID".equals(word)) {
            i++;
            word = tokenarray[i];
            return nonemptylistprime();
        } else {
            return true;
        }

    }

    public static boolean nonemptylist() throws IOException {

        if (typename()) {

            if ("ID".equals(word)) {
                i++;
                word = tokenarray[i];
                return nonemptylistprime();

            } else {
                return false;
            }
        } else {
            return false;
        }

    }

    public static boolean nonemptylistprime() throws IOException {

        if ("comma".equals(word)) {
            i++;
            word = tokenarray[i];

            if (typename()) {

                if ("ID".equals(word)) {
                    i++;
                    word = tokenarray[i];
                    return nonemptylistprime();

                } else {
                    return false;
                }
            } else {
                return false;
            }

        } else {
            return true;
        }

    }

    public static boolean datadecls() throws IOException {

        if (typename()) {
            if (idlist()) {

                if ("semicolon".equals(word)) {
                    i++;
                    word = tokenarray[i];
                    if (B()) {

                        return true;
                    } else {
                        return false;
                    }

                } else {
                    return false;
                }
            } else {
                return false;
            }

        } else {

            return true;  //data decl rule *****************************************************
        }

    }

    public static boolean B() throws IOException {

        if (datadecls()) {

            return true;
        } else {

            return true;
        }

    }

    public static boolean idlist() throws IOException {

        if (id()) {
            return idlistprime();

        } else {
            return false;
        }
    }

    public static boolean idlistprime() throws IOException {

        variable++;

        if ("comma".equals(word)) {
            i++;

            word = tokenarray[i];
            if (id()) {

                return idlistprime();

            } else {
                return false;
            }

        } else {
            return true;
        }

    }

    public static boolean id() throws IOException {

        boolean flag = false;

        if ("ID".equals(word)) {

            i++;
            word = tokenarray[i];

            if (Beta3()) {
                flag = true;
            }

        } else {
            flag = false;
        }
        return flag;

    }

    public static boolean Beta3() throws IOException {

        if ("left_bracket".equals(word)) {
           
            i++;
            word = tokenarray[i];
            if (expression()) {
                if ("right_bracket".equals(word)) {
                    i++;
                    word = tokenarray[i];
                    return true;
                } else {
                    return false;
                }
            } else {
                return false;
            }

        } else {

            return true;
        }

    }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static boolean blockstatements() throws IOException {

        if ("left_brace".equals(word)) {
            i++;
            word = tokenarray[i];
            if (statements()) {

                if ("right_brace".equals(word)) {
                    i++;
                    word = tokenarray[i];
                    return true;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    public static boolean statements() throws IOException {

        boolean flag = false;
        if (statement()) {
            if (statements()) {

                flag = true;
                statement++;
            }

        } else {
            flag = true;
        }

        return flag;
    }

    public static boolean statement() throws IOException {

        boolean flag = false;

        if ("ID".equals(word)) {
            i++;
            word = tokenarray[i];
            if (X()) {
                flag = true;
            }

        } else if (ifstatement()) {
            flag = true;
        } else if (whilestatement()) {
            flag = true;
        } else if (returnstatement()) {
            flag = true;
        } else if (breakstatement()) {
            flag = true;
        } else if (continuestatement()) {
            flag = true;
        } else if ("read".equals(word)) {
            i++;
            word = tokenarray[i];
            if ("left_parenthesis".equals(word)) {
                i++;
                word = tokenarray[i];

                if ("ID".equals(word)) {
                    i++;
                    word = tokenarray[i];
                    if ("right_parenthesis".equals(word)) {
                        i++;
                        word = tokenarray[i];
                        if ("semicolon".equals(word)) {
                            i++;
                            word = tokenarray[i];
                            flag = true;
                        }

                    }
                }
            }

        } else if ("print".equals(word)) {
            i++;
            word = tokenarray[i];
            if ("left_parenthesis".equals(word)) {
                i++;
                word = tokenarray[i];
                if ("string".equals(word)) {
                    i++;
                    word = tokenarray[i];
                    if ("right_parenthesis".equals(word)) {
                        i++;
                        word = tokenarray[i];
                        if ("semicolon".equals(word)) {
                            i++;
                            word = tokenarray[i];
                            flag = true;
                        }
                    }
                }
            }

        } else if ("write".equals(word)) {
            i++;
            word = tokenarray[i];
            if ("left_parenthesis".equals(word)) {
                i++;
                word = tokenarray[i];
                if (expression()) {

                    if ("right_parenthesis".equals(word)) {
                        i++;
                        word = tokenarray[i];
                        if ("semicolon".equals(word)) {
                            i++;
                            word = tokenarray[i];
                            flag = true;
                        }
                    }

                }
            }
        }

        return flag;
    }

    public static boolean X() throws IOException {

        boolean flag = false;

        if ("left_parenthesis".equals(word)) {

            i++;
            word = tokenarray[i];
            if (exprlist()) {
                if ("right_parenthesis".equals(word)) {
                    i++;
                    word = tokenarray[i];

                    if ("semicolon".equals(word)) {
                        i++;
                        word = tokenarray[i];
                        flag = true;
                    }
                }

            }
        } else if (Beta3()) {

            if ("equal_sign".equals(word)) {

                i++;
                word = tokenarray[i];
                if (expression()) {
                    if ("semicolon".equals(word)) {
                        i++;
                        word = tokenarray[i];
                        flag = true;

                    }
                }
            }

        } else {
            flag = false;
        }
        return flag;

    }

    public static boolean assignment() throws IOException {

        if (id()) {
            //call for nextword()

            if ("equal_sign".equals(word)) {
                i++;
                word = tokenarray[i];
                if (expression()) {
                    // call for next word
                    if ("semicolon".equals(word)) {
                        i++;
                        word = tokenarray[i];
                        return true;
                    } else {
                        return false;
                    }

                } else {
                    return false;
                }

            } else {
                return false;
            }

        } else {
            return false;
        }
    }

    public static boolean funccall() throws IOException {

        if ("ID".equals(word)) {
            i++;
            word = tokenarray[i];
            if ("left_parenthesis".equals(word)) {
                i++;
                word = tokenarray[i];
                if (exprlist()) {

                    if ("right_parenthesis".equals(word)) {
                        i++;
                        word = tokenarray[i];
                        if ("semicolon".equals(word)) {
                            i++;
                            word = tokenarray[i];
                            return true;
                        } else {
                            return false;
                        }
                    } else {
                        return false;
                    }
                } else {
                    return false;
                }

            } else {
                return false;
            }

        } else {
            return false;
        }

    }

    public static boolean exprlist() throws IOException {

        if (nonemptyexprlist()) {
            return true;
        } else {
            return true;
        }

    }

    public static boolean nonemptyexprlist() throws IOException {

        if (expression()) {
            return nonemptyexprlistprime();
        } else {
            return false;
        }
    }

    public static boolean nonemptyexprlistprime() throws IOException {

        if ("comma".equals(word)) {
            i++;
            word = tokenarray[i];
            if (expression()) {
                return nonemptyexprlistprime();

            } else {
                return false;
            }

        } else {
            return true;
        }

    }

    public static boolean ifstatement() throws IOException {

        if ("if".equals(word)) {
            i++;
            word = tokenarray[i];
            if ("left_parenthesis".equals(word)) {
                i++;
                word = tokenarray[i];
                if (conditionexpression()) {
                    //call for next word
                    if ("right_parenthesis".equals(word)) {
                        i++;
                        word = tokenarray[i];

                        return blockstatements();

                    } else {
                        return false;
                    }
                } else {
                    return false;
                }

            } else {
                return false;
            }

        } else {
            return false;
        }

    }

    public static boolean conditionexpression() throws IOException {

        if (condition()) {
            return Beta2();
        } else {
            return false;
        }
    }

    public static boolean Beta2() throws IOException {

        if (conditionop()) {
            return condition();
        } else {
            return true;
        }
    }

    public static boolean conditionop() throws IOException {

        if ("double_and_sign".equals(word) || "double_or_sign".equals(word)) {
            i++;
            word = tokenarray[i];
            return true;
        } else {
            return false;
        }
    }

    public static boolean condition() throws IOException {

        boolean flag = false;
        if (expression()) {
            if (comparisionop()) {
                if (expression()) {
                    flag = true;
                }
            }
        } else {
            flag = false;
        }
        return flag;
    }

    public static boolean comparisionop() throws IOException {

        if ("==".equals(word) || "!=".equals(word) || "<=".equals(word) || ">=".equals(word) || "<".equals(word) || ">".equals(word)) {
            i++;
            word = tokenarray[i];
            return true;
        } else {
            return false;
        }
    }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public static boolean whilestatement() throws IOException {

        if ("while".equals(word)) {
            i++;
            word = tokenarray[i];
            if ("left_parenthesis".equals(word)) {
                i++;
                word = tokenarray[i];
                if (conditionexpression()) {
                    if ("right_parenthesis".equals(word)) {
                        i++;
                        word = tokenarray[i];
                        return blockstatements();
                    } else {
                        return false;
                    }
                } else {
                    return false;
                }

            } else {
                return false;
            }

        } else {
            return false;
        }

    }

    public static boolean returnstatement() throws IOException {

        boolean flag = false;
        if ("return".equals(word)) {
            i++;
            word = tokenarray[i];

            if (Beta4()) {
                flag = true;
            }
        } else {
            flag = false;
        }
        return flag;
    }

    public static boolean Beta4() throws IOException {

        boolean flag = false;
        if ("semicolon".equals(word)) {
            i++;
            word = tokenarray[i];
            flag = true;
        } else if (expression()) {
            //call for nextword()
            if ("semicolon".equals(word)) {
                i++;
                word = tokenarray[i];
                flag = true;
            }
        } else {
            return false;
        }
        return flag;
    }

    public static boolean breakstatement() throws IOException {

        boolean flag = false;

        if ("break".equals(word)) {
            i++;
            word = tokenarray[i];
            if ("semicolon".equals(word)) {
                i++;
                word = tokenarray[i];
                flag = true;
            }
        } else {
            flag = false;
        }
        return flag;
    }

    public static boolean continuestatement() throws IOException {

        boolean flag = false;
        if ("continue".equals(word)) {
            i++;
            word = tokenarray[i];
            if ("semicolon".equals(word)) {
                i++;
                word = tokenarray[i];
                flag = true;
            }
        } else {
            flag = false;
        }
        return flag;

    }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public static boolean expression() throws IOException {

        boolean flag = false;
        if (term()) {
            if (expressionprime()) {
                flag = true;
            }
        } else {
            flag = false;
        }
        return flag;
    }

    public static boolean expressionprime() throws IOException {

        boolean flag = false;
        if (addop()) {
            if (term()) {
                if (expressionprime()) {
                    flag = true;
                }
            }
        } else {
            flag = true;
        }
        return flag;
    }

    public static boolean addop() throws IOException {

        if ("plus_sign".equals(word) || word == "minus_sign") {
            i++;
            word = tokenarray[i];
            return true;
        } else {
            return false;
        }
    }

    public static boolean term() throws IOException {

        boolean flag = false;
        if (factor()) {

            if (termprime()) {
                flag = true;
            }
        } else {
            flag = false;
        }
        return flag;
    }

    public static boolean termprime() throws IOException {

        boolean flag = false;
        if (mulop()) {
            if (factor()) {
                if (termprime()) {
                    flag = true;
                }

            }

        } else {
            flag = true;
        }
        return flag;
    }

    public static boolean mulop() throws IOException {

        if ("star_sign".equals(word) || "forward_slash".equals(word)) {
            i++;
            word = tokenarray[i];
            return true;
        } else {
            return false;
        }

    }

    public static boolean factor() throws IOException {

        boolean flag = true;

        if ("ID".equals(word)) {
            i++;
            word = tokenarray[i];
            if (Beta5()) {
                flag = true;
            }

        } else if ("digit".equals(word)) {
           
            i++;
            word = tokenarray[i];
            flag = true;
        } else if ("minus_sign".equals(word)) {
            i++;
            word = tokenarray[i];
            if ("digit".equals(word)) {
                i++;
                word = tokenarray[i];
                flag = true;
            }

        } else if ("left_parenthesis".equals(word)) {
            i++;
            word = tokenarray[i];
            if (expression()) {
                if ("right_parenthesis".equals(word)) {
                    i++;
                    word = tokenarray[i];
                    flag = true;
                }

            }

        } else {
            flag = false;
        }
       
        return flag;

    }

    public static boolean Beta5() throws IOException {

        boolean flag = false;
        if ("left_bracket".equals(word)) {
            i++;
            word = tokenarray[i];
            if (expression()) {
                if ("right_bracket".equals(word)) {
                    i++;
                    word = tokenarray[i];
                    flag = true;
                }
            }

        } else if ("left_parenthesis".equals(word)) {
            i++;
            word = tokenarray[i];
            if (exprlist()) {
                if ("right_parenthesis".equals(word)) {
                    i++;
                    word = tokenarray[i];
                    flag = true;
                }
            }

        } else {
            flag = true;
        }

        return flag;

    }

}
